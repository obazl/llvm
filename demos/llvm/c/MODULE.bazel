module(
    name = "demos",
    # version of this module, not llvm
    version = "1.0.0",
    compatibility_level = 1,
    bazel_compatibility = [">=6.0.0"]
)

bazel_dep(name = "obazl_llvm")
local_path_override(
    module_name = "obazl_llvm",
    path = "../../..",
)

ollvm = use_extension(
    "@obazl_llvm//extensions:llvm.bzl",
    "llvm"
)

LLVM_VERSION = "17.0.1"

#config distro v. config src build
ollvm.config(
    ## only for downloading
    version = LLVM_VERSION,
    # extension detects whether llvm_root
    # points to a distro or a local src build

    # @demos won't work, with:
    # llvm_root = "@demos//.config/llvm:root"
    # we get:
    # @@[unknown repo 'demos' requested from @llvm~override]//.config/llvm:root

    # why? this fn llvm_config.llvm is from @llvm (which is
    # overridden)

    ## so to use local .config/llvm:root use @@:
    llvm_root = "@@//.config/llvm:demos_root"

    ## single @// also won't work, it will be interpreted
    ## relative to @llvm~override

    # llvm_root = LLVM_ROOT, # local path
    # llvm_root = None # default: download distro
    # to download and build llvm-project:
    # llvm_root = 1
    #or
    # hermetic = True # ??
)
use_repo(ollvm, "llvm")

ollvm.llvm_c_sdk()
use_repo(ollvm, "llvm_c_sdk")

register_toolchains("@llvm//toolchain:all")

# llvm_config.ocaml_sdk(
#     # version = LLVM_VERSION,
#     # llvm_build_dir = LLVM_BUILD_DIR,
#     targets = ["ALL"]
# )
# use_repo(llvm_config, "llvm_ocaml_sdk")

# use_repo(llvm_sdk,
#          "llvm_tools",
#          "llvm_c_sdk",
#          ocaml_llvm = "llvm_ocaml_sdk")

# llvm.clang_c_sdk()
# use_repo(llvm, "clang_c_sdk")

################################
# clang = use_extension(
#     "@llvm//extensions:clang.bzl",
#     "clang"
# )

# clang.c_sdk()
# use_repo(clang, "clang_c_sdk")

################################################################
bazel_dep(name = "toolchains_llvm", version = "0.10.3")

# To directly use a commit from GitHub, replace commit with the commit you want.
# Otherwise, omit this block.
git_override(
  module_name = "toolchains_llvm",
  commit = "42e0b400fe316797657ccc5d7d2f9bb6f13071d8",
  remote = "https://github.com/grailbio/bazel-toolchain",
)

# Configure and register the toolchain.
llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")
llvm.toolchain(
   llvm_version = "16.0.0",
)

use_repo(llvm, "llvm_toolchain")
# use_repo(llvm, "llvm_toolchain_llvm") # if you depend on specific tools in scripts

# register_toolchains("@llvm_toolchain//:all")

################################################################
bazel_dep(name = "platforms",    version = "0.0.7")
bazel_dep(name = "bazel_skylib", version = "1.4.2")
bazel_dep(name = "cc_config",    version = "1.0.0")

# bazel_dep(name = "obazl",           version = "1.0.0",
#           dev_dependency = True)

# bazel_dep(name = "ncurses", version = "6.4")
# # on macos, ncurses comes with the sdks,
# # so linker knows where to search

# bazel_dep(name = "zlib", version = "1.3")

